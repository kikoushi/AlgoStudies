package dataStructures;

public class MyQueue<K>{
	
	private Node<K> first;
	private Node<K> last;
	private int size;
	
	public MyQueue(){
		this.first = null;
		this.last = null;
		this.size = 0;
	}
	
//	public MyQueue(K k){
//		Node<K> n = new Node<K>(k);
//		this.head = n;
//		this.tail = n;
//		this.head.setNext(this.tail);
//		this.size = 0;
//	}
	
	public boolean isEmpty(){
		return this.first == null;
	}
	
	public int size(){
		return this.size;
	}
	
	public void enqueue(K k){
		Node<K> newLast = new Node<K>(k);
		if(isEmpty()){
			first = last;
		}			
		else{
			this.last.setNext(new Node<K>(k));
			this.last = this.last.getNext();
		}
	}
	
	public Node<K> peek() throws Exception{
		if(this.first == null)
			throw new Exception("exception");
		
		return this.first;
	}
	
//	public Node getHead() {
//		return head;
//	}
//	public void setHead(Node head) {
//		this.head = head;
//	}
//	public Node getTail() {
//		return tail;
//	}
//	public void setTail(Node tail) {
//		this.tail = tail;
//	}
//	public int getSize() {
//		return size;
//	}
//	public void setSize(int size) {
//		this.size = size;
//	}
	
	

}
