package coursera_algo1_princeton;

public class QuickSelect {

	public static<T extends Comparable<T>> T kthSmallestElement(T[] arr, int k){		
		if(k<0|| k>=arr.length)
			throw new IllegalArgumentException();
		
		KnuthShuffle.shuffle(arr);
		return kthSmallestElement(arr, k, 0, arr.length-1);
	}
	
	private static<T extends Comparable<T>> T kthSmallestElement(T[] arr, int k, int lo, int hi){		
		
		while(true){
			int par = partition(arr, lo, hi);
			if(par < k)  			lo = par+1;
			else if(par > k)   hi = par - 1;
			else return arr[k];			
		}
	}
	
	private static <T extends Comparable<T>>  int partition(T[] arr, int lo, int hi){		
		int i = lo;
		int j= hi+1;
		
		while(true){
			while(!less(arr[lo], arr[++i])) 
				if(i == hi) break;
			while(!less(arr[--j],arr[lo]))
				if(j == lo) break;
			
			if(i >= j) break;
			exch(arr, i, j);
		}
		exch(arr, j, lo);
		return j;
	}
	
	private static <T extends Comparable<T>> boolean less(T t1, T t2){
		return t1.compareTo(t2) < 0;
	}
	private static <T extends Comparable<T>> void exch(T[] arr, int i, int j){
		T aux = arr[i];
		arr[i] =arr[j];
		arr[j] = aux;
	}
	
	
	public static void main(String[] args) {
		Integer[] myArr = new Integer[]{3,6,2,7,99,23,11}; 
		System.out.println(kthSmallestElement(myArr, 6));
	}

}
